---
- name: Setup Bastion Host
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    region: us-east-2

  tasks:
    - name: Import VPC setup Variables
      include_vars: vars/vpc-output_vars

    - name: Import vprofile setup Variables
      include_vars: vprostacksetup.yml

    - name: Create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

    - name: Set ELB Security Group Name
      set_fact:
        elb_sg_name: "YourELBSecurityGroupName"

    - name: Create ELB Security Group
      ec2_group:
        name: "{{ elb_sg_name }}"
        description: "Allow port 80 from everywhere and all port within SG"
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0  # Allow incoming HTTP traffic from anywhere
      register: vproELBSG_out

    - name: Ensure SG For vpro stack exists
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        state: present
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
      register: vproStackSG_out

    - name: Check if Nginx web01 instance exists
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "web01"
      register: web01_instance_info

    - name: Creating Nginx web01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{ ami_ids.nginx }}"
        wait: yes
        wait_timeout: 300
        count: 1
        tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      when: web01_instance_info.instances | length == 0  # Create only if not exists

    - name: Check if tomcat app01 instance exists
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "app01"
      register: app01_instance_info

    - name: Creating tomcat app01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{ ami_ids.tomcat }}"
        wait: yes
        wait_timeout: 300
        count: 1
        tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      when: app01_instance_info.instances | length == 0  # Create only if not exists

    - name: Check if memcache mc01 instance exists
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "mc01"
      register: mc01_instance_info

    - name: Creating memcache mc01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{ ami_ids.memcache }}"
        wait: yes
        wait_timeout: 300
        count: 1
        tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      when: mc01_instance_info.instances | length == 0  # Create only if not exists

    - name: Check if RabbitMQ rmq01 instance exists
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "rmq01"
      register: rmq01_instance_info

    - name: Creating RabbitMQ rmq01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{ ami_ids.rmq }}"
        wait: yes
        wait_timeout: 300
        count: 1
        tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      when: rmq01_instance_info.instances | length == 0  # Create only if not exists

    - name: Check if Mysql db01 instance exists
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": "db01"
      register: db01_instance_info

    - name: Creating Mysql db01
      ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image:
          id: "{{ ami_ids.mysql }}"
        wait: yes
        wait_timeout: 300
        count: 1
        tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
      when: db01_instance_info.instances | length == 0  # Create only if not exists

    - name: debug
      debug:
        var: db01_out.instances[0].id

    - name: Create ELB if web01 instance exists
      local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{ region }}"
        state: present
        instance_ids: "{{ web01_out.tagged_instances[0].id | default([]) }}"
        purge_instance_ids: true
        security_group_ids: "{{ vproELBSG_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      when: web01_out is defined and web01_out.tagged_instances | length > 0

    - name: Insert/Update Hosts IP & Name in file provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          {% if web01_out.tagged_instances | length > 0 %}
          web01_ip: {{ web01_out.tagged_instances[0].private_ip }}
          {% endif %}
          {% if app01_out.tagged_instances | length > 0 %}
          app01_ip: {{ app01_out.tagged_instances[0].private_ip }}
          {% endif %}
          {% if rmq01_out.tagged_instances | length > 0 %}
          rmq01_ip: {{ rmq01_out.tagged_instances[0].private_ip }}
          {% endif %}
          {% if mc01_out.tagged_instances | length > 0 %}
          mc01_ip: {{ mc01_out.tagged_instances[0].private_ip }}
          {% endif %}
          {% if db01_out.tagged_instances | length > 0 %}
          db01_ip: {{ db01_out.tagged_instances[0].private_ip }}
          {% endif %}
      when:
        - web01_out is defined and web01_out.tagged_instances | length > 0
        - app01_out is defined and app01_out.tagged_instances | length > 0
        - rmq01_out is defined and rmq01_out.tagged_instances | length > 0
        - mc01_out is defined and mc01_out.tagged_instances | length > 0
        - db01_out is defined and db01_out.tagged_instances | length > 0

    - name: Copy login key to provision_stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: '0400'

    - name: Ensure provision-stack directory exists
      file:
        path: provision-stack
        state: directory

    - name: Ensure provision-stack/inventory-vpro file exists
      file:
        path: provision-stack/inventory-vpro
        state: touch

    - name: Insert/Update Inventory file provision-stack/inventory-vpro
      blockinfile:
        path: provision-stack/inventory-vpro
        block: |
          {% if web01_out is defined and web01_out.tagged_instances | length > 0 %}
          web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
          {% endif %}

          {% if app01_out is defined and app01_out.tagged_instances | length > 0 %}
          app01 ansible_host={{ app01_out.tagged_instances[0].private_ip }}
          {% endif %}

          {% if rmq01_out is defined and rmq01_out.tagged_instances | length > 0 %}
          rmq01 ansible_host={{ rmq01_out.tagged_instances[0].private_ip }}
          {% endif %}

          {% if mc01_out is defined and mc01_out.tagged_instances | length > 0 %}
          mc01 ansible_host={{ mc01_out.tagged_instances[0].private_ip }}
          {% endif %}

          {% if db01_out is defined and db01_out.tagged_instances | length > 0 %}
          db01 ansible_host={{ db01_out.tagged_instances[0].private_ip }}
          {% endif %}

          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          {% if web01_out is defined and web01_out.tagged_instances | length > 0 %}
          web01
          {% endif %}

          [appsrvgrp]
          {% if app01_out is defined and app01_out.tagged_instances | length > 0 %}
          app01
          {% endif %}

          [rmqsrvgrp]
          {% if rmq01_out is defined and rmq01_out.tagged_instances | length > 0 %}
          rmq01
          {% endif %}

          [mcsrvgrp]
          {% if mc01_out is defined and mc01_out.tagged_instances | length > 0 %}
          mc01
          {% endif %}

          [dbsrvgrp]
          {% if db01_out is defined and db01_out.tagged_instances | length > 0 %}
          db01
          {% endif %}

          [control]
          cntl

          [stack_inst:children]
          {% if web01_out is defined and web01_out.tagged_instances | length > 0 %}
          websrvgrp
          {% endif %}

          {% if app01_out is defined and app01_out.tagged_instances | length > 0 %}
          appsrvgrp
          {% endif %}

          {% if rmq01_out is defined and rmq01_out.tagged_instances | length > 0 %}
          rmqsrvgrp
          {% endif %}

          {% if mc01_out is defined and mc01_out.tagged_instances | length > 0 %}
          mcsrvgrp
          {% endif %}

          {% if db01_out is defined and db01_out.tagged_instances | length > 0 %}
          dbsrvgrp
          {% endif %}

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
          #ansible_python_interpreter=/usr/bin/python3
