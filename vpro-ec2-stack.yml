---
- name: Setup Bastion Host
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    region: us-east-2
  tasks:
    - name: Import VPC setup Variables
      include_vars: vars/vpc-output_vars

    - name: Import vprofile setup Variables
      include_vars: vprostacksetup

    - name: Create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

    - name: Set ELB Security Group Name
      set_fact:
        elb_sg_name: "YourELBSecurityGroupName"

    - name: Create ELB Security Group
      ec2_group:
        name: "{{ elb_sg_name }}"
        description: "Allow port 80 from everywhere and all port within SG"
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0  # Allow incoming HTTP traffic from anywhere
      register: vproELBSG_out

    - name: Ensure SG For vpro stack exists
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        state: present
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
      register: vproStackSG_out

    - name: Update SG For vpro stack
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within SG
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        state: present
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
      when: not vproStackSG_out.changed

    - name: Creating Nginx web01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        count: 1
        instance_tags:
          - key: Name
            value: "web01"
          - key: Project
            value: Vprofile
          - key: Owner
            value: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        subnet: "{{ privsub1id }}"
      register: web01_out

    - name: Creating tomcat app01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        count: 1
        instance_tags:
          - key: Name
            value: "app01"
          - key: Project
            value: Vprofile
          - key: Owner
            value: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        subnet: "{{ privsub1id }}"
      register: app01_out

    - name: Creating memcache mc01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        count: 1
        instance_tags:
          - key: Name
            value: "mc01"
          - key: Project
            value: Vprofile
          - key: Owner
            value: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        subnet: "{{ privsub1id }}"
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        count: 1
        instance_tags:
          - key: Name
            value: "rmq01"
          - key: Project
            value: Vprofile
          - key: Owner
            value: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        subnet: "{{ privsub1id }}"
      register: rmq01_out

    - name: Creating Mysql db01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        count: 1
        instance_tags:
          - key: Name
            value: "db01"
          - key: Project
            value: Vprofile
          - key: Owner
            value: DevOps Team
        security_groups: "{{ vproStackSG_out.group_id }}"
        subnet: "{{ privsub1id }}"
      register: db01_out

    - debug:
        var: db01_out.tagged_instances[0].id
